The ``1-my_list`` module
=======================

Using ``MyList``
---------------

First import ``MyList`` from the ``1-my_list`` module:

      >>> MyList = __import__('1-my_list').MyList

Check for docstrings:
      # module docstring
      >>> print(__import__("1-my_list").__doc__)
      Module to define MyList class

      # class docstring
      >>> print(__import__("1-my_list").MyList.__doc__)
      Class MyList.
          Parent class: list.
      <BLANKLINE>

      # Function docstrings
      ## Inside class
      ### print_sorted
      >>> print(__import__("1-my_list").MyList.print_sorted.__doc__)
      print_sorted method
       	      Prints the list in acending order.

Expected Success:
	 # int list: already ascending
	 >>> my_list = MyList([2, 3, 6, 7])
	 >>> print(my_list)
	 [2, 3, 6, 7]
	 >>> my_list.print_sorted()
	 [2, 3, 6, 7]

	 # int list: descending order
	 >>> my_list1 = MyList([9, 6, 4, 1])
	 >>> print(my_list1)
	 [9, 6, 4, 1]
	 >>> my_list1.print_sorted()
	 [1, 4, 6, 9]

	 # int list: mixed order
	 >>> my_list2 = MyList([5, 8, 2, 0])
	 >>> print(my_list2)
	 [5, 8, 2, 0]
	 >>> my_list2.print_sorted()
	 [0, 2, 5, 8]

	 # Bool list
	 >>> bool_list = MyList([True, False])
	 >>> print(bool_list)
	 [True, False]
	 >>> bool_list.print_sorted()
	 [False, True]

	 
Expected Failure:
	 # list is strings
	 >>> not_list = MyList(['hi', 'oh dear'])
	 >>> print(not_list)
	 ['hi', 'oh dear']
	 >>> not_list.print_sorted()
	 ['hi', 'oh dear']

	 # list is tuples
	 >>> not_list1 = MyList([(4, 3), (4, 5)])
	 >>> print(not_list1)
	 [(4, 3), (4, 5)]
	 >>> not_list1.print_sorted()
	 [(4, 3), (4, 5)]

	 # list is tuples again
	 >>> not_list2 = MyList([(9, 8), (5, 4)])
	 >>> print(not_list2)
	 [(9, 8), (5, 4)]
	 >>> not_list2.print_sorted()
	 [(5, 4), (9, 8)]
